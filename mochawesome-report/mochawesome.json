{
  "stats": {
    "suites": 4,
    "tests": 20,
    "passes": 20,
    "pending": 0,
    "failures": 0,
    "start": "2025-01-23T07:05:09.998Z",
    "end": "2025-01-23T07:05:10.013Z",
    "duration": 15,
    "testsRegistered": 20,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "bb30c77f-2ef6-45be-acc1-0a17ec7b8c3b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cbbc70b1-df89-44cb-8e88-8617b3d33e3d",
          "title": "isNumberEven positive tests",
          "fullFile": "C:\\Users\\W\\OneDrive\\Desktop\\GitHub_projects\\First-Unit-Test\\test\\numbers-validator\\isNumberEven.spec.js",
          "file": "\\test\\numbers-validator\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven positive tests\"",
              "fullTitle": "isNumberEven positive tests \"before each\" hook in \"isNumberEven positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "e3f331eb-b4bd-4529-a048-163ba9a3d404",
              "parentUUID": "cbbc70b1-df89-44cb-8e88-8617b3d33e3d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven positive tests\"",
              "fullTitle": "isNumberEven positive tests \"after each\" hook in \"isNumberEven positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "8b39b1c1-28be-4e7a-9a25-e99bad7f7632",
              "parentUUID": "cbbc70b1-df89-44cb-8e88-8617b3d33e3d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true when provided with an even number",
              "fullTitle": "isNumberEven positive tests should return true when provided with an even number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(4);\nexpect(validationResults).to.be.true;",
              "err": {},
              "uuid": "e9fdd7e3-c2b4-4161-85ae-4e7948ac7d2f",
              "parentUUID": "cbbc70b1-df89-44cb-8e88-8617b3d33e3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when provided with an odd number",
              "fullTitle": "isNumberEven positive tests should return false when provided with an odd number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(5);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "4463987c-b903-41a5-b916-57284d55f43a",
              "parentUUID": "cbbc70b1-df89-44cb-8e88-8617b3d33e3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided a string",
              "fullTitle": "isNumberEven positive tests should throw an error when provided a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven(\"5\");\n}).to.throw('[5] is not of type \"Number\" it is of type \"string\"');",
              "err": {},
              "uuid": "d000727b-1d2f-49e4-9841-87d5139892e8",
              "parentUUID": "cbbc70b1-df89-44cb-8e88-8617b3d33e3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for a positive number",
              "fullTitle": "isNumberEven positive tests should return true for a positive number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = 5;\nconst result = validator.isNumberEven(input);\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "2b442c52-0be3-496c-b10c-2d8437b714b5",
              "parentUUID": "cbbc70b1-df89-44cb-8e88-8617b3d33e3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error with message '...is too low, Provide a number above 0' when provided with a 0",
              "fullTitle": "isNumberEven positive tests should throw an error with message '...is too low, Provide a number above 0' when provided with a 0",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = 0;\nexpect(() => {\n  validator.isNumberEven(input);\n})\n  .to.throw(Error)\n  .with.property(\"message\", \"[0] is too low, Provide a number above 0\");",
              "err": {},
              "uuid": "d1336d4e-31c1-4989-b690-2719521b8881",
              "parentUUID": "cbbc70b1-df89-44cb-8e88-8617b3d33e3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error with message '...is too low, Provide a number above 0' when provided with a negative number",
              "fullTitle": "isNumberEven positive tests should throw an error with message '...is too low, Provide a number above 0' when provided with a negative number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = -3;\nexpect(() => {\n  validator.isNumberEven(input);\n}).to.throw(\"[-3] is too low, Provide a number above 0\");",
              "err": {},
              "uuid": "9c149977-920b-4ad8-8c5a-4b3aa0d6e107",
              "parentUUID": "cbbc70b1-df89-44cb-8e88-8617b3d33e3d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e9fdd7e3-c2b4-4161-85ae-4e7948ac7d2f",
            "4463987c-b903-41a5-b916-57284d55f43a",
            "d000727b-1d2f-49e4-9841-87d5139892e8",
            "2b442c52-0be3-496c-b10c-2d8437b714b5",
            "d1336d4e-31c1-4989-b690-2719521b8881",
            "9c149977-920b-4ad8-8c5a-4b3aa0d6e107"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e1a9907a-9977-4e34-8c74-938cc6799d6a",
          "title": "getEvenNumbersFromArray",
          "fullFile": "C:\\Users\\W\\OneDrive\\Desktop\\GitHub_projects\\First-Unit-Test\\test\\numbers-validator\\isNumberEven.spec.js",
          "file": "\\test\\numbers-validator\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"getEvenNumbersFromArray\"",
              "fullTitle": "getEvenNumbersFromArray \"before each\" hook in \"getEvenNumbersFromArray\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "3ab8925c-b267-4e73-8ad4-6ebc7d7df1dd",
              "parentUUID": "e1a9907a-9977-4e34-8c74-938cc6799d6a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"getEvenNumbersFromArray\"",
              "fullTitle": "getEvenNumbersFromArray \"after each\" hook in \"getEvenNumbersFromArray\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "93959e8b-7a4f-4d70-b54d-c0c5191f2448",
              "parentUUID": "e1a9907a-9977-4e34-8c74-938cc6799d6a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return an array of even numbers when given an array of numbers",
              "fullTitle": "getEvenNumbersFromArray should return an array of even numbers when given an array of numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [1, 2, 3, 4, 5, 6];\nconst expectedOutput = [2, 4, 6];\nconst output = validator.getEvenNumbersFromArray(input);\nexpect(output).to.deep.equal(expectedOutput);",
              "err": {},
              "uuid": "1b12b11d-22b1-4130-b0d8-8e72f024df90",
              "parentUUID": "e1a9907a-9977-4e34-8c74-938cc6799d6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array when given an array with no even numbers",
              "fullTitle": "getEvenNumbersFromArray should return an empty array when given an array with no even numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [1, 3, 5];\nconst output = validator.getEvenNumbersFromArray(input);\nexpect(output).to.be.an(\"array\").that.is.empty;",
              "err": {},
              "uuid": "c139e49a-b525-40fb-ba3e-c639038f69ac",
              "parentUUID": "e1a9907a-9977-4e34-8c74-938cc6799d6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when given a non-array input",
              "fullTitle": "getEvenNumbersFromArray should throw an error when given a non-array input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = \"not an array\";\nexpect(() => validator.getEvenNumbersFromArray(input)).to.throw(\n  `[not an array] is not an array of \"Numbers\"`\n);",
              "err": {},
              "uuid": "893b9f72-2204-4a86-83ca-b0c8dffd456e",
              "parentUUID": "e1a9907a-9977-4e34-8c74-938cc6799d6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when given an array with non-numeric elements",
              "fullTitle": "getEvenNumbersFromArray should throw an error when given an array with non-numeric elements",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [1, 2, \"not a number\", 4];\nexpect(() => validator.getEvenNumbersFromArray(input)).to.throw(\n  `[1,2,not a number,4] is not an array of \"Numbers\"`\n);",
              "err": {},
              "uuid": "3cd54678-50ad-4981-b844-53ae72750012",
              "parentUUID": "e1a9907a-9977-4e34-8c74-938cc6799d6a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1b12b11d-22b1-4130-b0d8-8e72f024df90",
            "c139e49a-b525-40fb-ba3e-c639038f69ac",
            "893b9f72-2204-4a86-83ca-b0c8dffd456e",
            "3cd54678-50ad-4981-b844-53ae72750012"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d9349fba-c571-429a-b59f-aa542573d1f4",
          "title": "isAllNumbers",
          "fullFile": "C:\\Users\\W\\OneDrive\\Desktop\\GitHub_projects\\First-Unit-Test\\test\\numbers-validator\\isNumberEven.spec.js",
          "file": "\\test\\numbers-validator\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isAllNumbers\"",
              "fullTitle": "isAllNumbers \"before each\" hook in \"isAllNumbers\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "3424043f-81d2-4db4-8a97-d4777519eeaa",
              "parentUUID": "d9349fba-c571-429a-b59f-aa542573d1f4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isAllNumbers\"",
              "fullTitle": "isAllNumbers \"after each\" hook in \"isAllNumbers\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "4964a447-7548-42c4-855f-4c8375139c81",
              "parentUUID": "d9349fba-c571-429a-b59f-aa542573d1f4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true for an array of numbers",
              "fullTitle": "isAllNumbers should return true for an array of numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [1, 2, 3, 4, 5];\nconst result = validator.isAllNumbers(input);\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "b221c1eb-4ecc-4b88-9a27-4e66bac87c73",
              "parentUUID": "d9349fba-c571-429a-b59f-aa542573d1f4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an empty array",
              "fullTitle": "isAllNumbers should return true for an empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [];\nconst result = validator.isAllNumbers(input);\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "84ed93ca-9d39-459f-a636-308f47f2b047",
              "parentUUID": "d9349fba-c571-429a-b59f-aa542573d1f4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if the argument is not an array",
              "fullTitle": "isAllNumbers should return false if the argument is not an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = \"not an array\";\nexpect(() => validator.isAllNumbers(input)).to.throw(\n  \"[not an array] is not an array\"\n);",
              "err": {},
              "uuid": "de414d7a-54cd-4c87-8f41-fa855ed09a17",
              "parentUUID": "d9349fba-c571-429a-b59f-aa542573d1f4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if the array contains non-numeric elements",
              "fullTitle": "isAllNumbers should return false if the array contains non-numeric elements",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [1, 2, \"not a number\", 4];\nconst result = validator.isAllNumbers(input);\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "a6a7dc21-6c06-4959-acfe-3ab3ecb3d0ed",
              "parentUUID": "d9349fba-c571-429a-b59f-aa542573d1f4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if any element in the array is not a number",
              "fullTitle": "isAllNumbers should return false if any element in the array is not a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [1, 2, 3, \"not a number\", 5];\nconst result = validator.isAllNumbers(input);\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "151fffac-46f1-41b8-a3da-f8b64d66ce92",
              "parentUUID": "d9349fba-c571-429a-b59f-aa542573d1f4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b221c1eb-4ecc-4b88-9a27-4e66bac87c73",
            "84ed93ca-9d39-459f-a636-308f47f2b047",
            "de414d7a-54cd-4c87-8f41-fa855ed09a17",
            "a6a7dc21-6c06-4959-acfe-3ab3ecb3d0ed",
            "151fffac-46f1-41b8-a3da-f8b64d66ce92"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "343ce691-81b0-4afd-901f-25e30ff0ba7e",
          "title": "isInteger",
          "fullFile": "C:\\Users\\W\\OneDrive\\Desktop\\GitHub_projects\\First-Unit-Test\\test\\numbers-validator\\isNumberEven.spec.js",
          "file": "\\test\\numbers-validator\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isInteger\"",
              "fullTitle": "isInteger \"before each\" hook in \"isInteger\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "51e43299-12bb-423e-81de-aa2df9a41346",
              "parentUUID": "343ce691-81b0-4afd-901f-25e30ff0ba7e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isInteger\"",
              "fullTitle": "isInteger \"after each\" hook in \"isInteger\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "b52133ea-45b0-49e3-b988-5d97a625ab69",
              "parentUUID": "343ce691-81b0-4afd-901f-25e30ff0ba7e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true for an integer number",
              "fullTitle": "isInteger should return true for an integer number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = 5;\nconst result = validator.isInteger(input);\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "4a48a8e9-784e-4c6c-b59a-306ecf1c205a",
              "parentUUID": "343ce691-81b0-4afd-901f-25e30ff0ba7e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for 0",
              "fullTitle": "isInteger should return true for 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = 0;\nconst result = validator.isInteger(input);\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "0599010b-29e1-416f-8dd7-1f81d9335b26",
              "parentUUID": "343ce691-81b0-4afd-901f-25e30ff0ba7e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for negative integer number",
              "fullTitle": "isInteger should return true for negative integer number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = -5;\nconst result = validator.isInteger(input);\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "e59ac8c4-dfbf-404b-a0b8-9be9247f912d",
              "parentUUID": "343ce691-81b0-4afd-901f-25e30ff0ba7e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a non-integer number",
              "fullTitle": "isInteger should return false for a non-integer number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = 5.5;\nconst result = validator.isInteger(input);\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "7d94cb1f-6555-4150-91c2-f27ad6195c88",
              "parentUUID": "343ce691-81b0-4afd-901f-25e30ff0ba7e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if the input is not a number",
              "fullTitle": "isInteger should throw an error if the input is not a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = \"not a number\";\nexpect(() => validator.isInteger(input)).to.throw(\n  \"[not a number] is not a number\"\n);",
              "err": {},
              "uuid": "6d1dd3b2-b171-42fc-98af-0232584a746e",
              "parentUUID": "343ce691-81b0-4afd-901f-25e30ff0ba7e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4a48a8e9-784e-4c6c-b59a-306ecf1c205a",
            "0599010b-29e1-416f-8dd7-1f81d9335b26",
            "e59ac8c4-dfbf-404b-a0b8-9be9247f912d",
            "7d94cb1f-6555-4150-91c2-f27ad6195c88",
            "6d1dd3b2-b171-42fc-98af-0232584a746e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}