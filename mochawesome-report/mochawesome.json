{
  "stats": {
    "suites": 4,
    "tests": 20,
    "passes": 20,
    "pending": 0,
    "failures": 0,
    "start": "2025-01-23T11:26:45.169Z",
    "end": "2025-01-23T11:26:45.184Z",
    "duration": 15,
    "testsRegistered": 20,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "00665822-1a3b-4b28-880b-9335e4288d5e",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "30f5dc92-4a2b-4b7f-a897-533e5b2bc531",
          "title": "isNumberEven positive tests",
          "fullFile": "C:\\Users\\W\\OneDrive\\Desktop\\GitHub_projects\\Testing\\test\\numbers-validator\\isNumberEven.spec.js",
          "file": "\\test\\numbers-validator\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven positive tests\"",
              "fullTitle": "isNumberEven positive tests \"before each\" hook in \"isNumberEven positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "953b5665-023a-4037-9be0-45ce5a0ce2ee",
              "parentUUID": "30f5dc92-4a2b-4b7f-a897-533e5b2bc531",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven positive tests\"",
              "fullTitle": "isNumberEven positive tests \"after each\" hook in \"isNumberEven positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "4c2a8025-749b-4224-a586-2486899dcd8b",
              "parentUUID": "30f5dc92-4a2b-4b7f-a897-533e5b2bc531",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true when provided with an even number",
              "fullTitle": "isNumberEven positive tests should return true when provided with an even number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(4);\nexpect(validationResults).to.be.true;",
              "err": {},
              "uuid": "d328ef5c-8e92-4733-8b8a-6977ed0e6da3",
              "parentUUID": "30f5dc92-4a2b-4b7f-a897-533e5b2bc531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when provided with an odd number",
              "fullTitle": "isNumberEven positive tests should return false when provided with an odd number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(5);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "ca70e11f-b11d-4413-9942-b4e603ef1569",
              "parentUUID": "30f5dc92-4a2b-4b7f-a897-533e5b2bc531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided a string",
              "fullTitle": "isNumberEven positive tests should throw an error when provided a string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven(\"5\");\n}).to.throw('[5] is not of type \"Number\" it is of type \"string\"');",
              "err": {},
              "uuid": "8f40552f-d107-406b-aa42-5d5832262c87",
              "parentUUID": "30f5dc92-4a2b-4b7f-a897-533e5b2bc531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for a positive number",
              "fullTitle": "isNumberEven positive tests should return true for a positive number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = 5;\nconst result = validator.isNumberEven(input);\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "51ef06e1-5414-4b8b-b086-2b142d75ee5f",
              "parentUUID": "30f5dc92-4a2b-4b7f-a897-533e5b2bc531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error with message '...is too low, Provide a number above 0' when provided with a 0",
              "fullTitle": "isNumberEven positive tests should throw an error with message '...is too low, Provide a number above 0' when provided with a 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = 0;\nexpect(() => {\n  validator.isNumberEven(input);\n})\n  .to.throw(Error)\n  .with.property(\"message\", \"[0] is too low, Provide a number above 0\");",
              "err": {},
              "uuid": "12e8e0fb-abdb-4e5d-b1f8-b240d85026e1",
              "parentUUID": "30f5dc92-4a2b-4b7f-a897-533e5b2bc531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error with message '...is too low, Provide a number above 0' when provided with a negative number",
              "fullTitle": "isNumberEven positive tests should throw an error with message '...is too low, Provide a number above 0' when provided with a negative number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = -3;\nexpect(() => {\n  validator.isNumberEven(input);\n}).to.throw(\"[-3] is too low, Provide a number above 0\");",
              "err": {},
              "uuid": "db60f4d4-4586-4f57-b225-43621afb9c09",
              "parentUUID": "30f5dc92-4a2b-4b7f-a897-533e5b2bc531",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d328ef5c-8e92-4733-8b8a-6977ed0e6da3",
            "ca70e11f-b11d-4413-9942-b4e603ef1569",
            "8f40552f-d107-406b-aa42-5d5832262c87",
            "51ef06e1-5414-4b8b-b086-2b142d75ee5f",
            "12e8e0fb-abdb-4e5d-b1f8-b240d85026e1",
            "db60f4d4-4586-4f57-b225-43621afb9c09"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1f06ab1e-6faf-4a5a-8931-e5d344eb57d1",
          "title": "getEvenNumbersFromArray",
          "fullFile": "C:\\Users\\W\\OneDrive\\Desktop\\GitHub_projects\\Testing\\test\\numbers-validator\\isNumberEven.spec.js",
          "file": "\\test\\numbers-validator\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"getEvenNumbersFromArray\"",
              "fullTitle": "getEvenNumbersFromArray \"before each\" hook in \"getEvenNumbersFromArray\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "112dfb08-e728-42db-9b8e-ca9c3b2db4d9",
              "parentUUID": "1f06ab1e-6faf-4a5a-8931-e5d344eb57d1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"getEvenNumbersFromArray\"",
              "fullTitle": "getEvenNumbersFromArray \"after each\" hook in \"getEvenNumbersFromArray\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "f51fed99-d1ad-4cc4-93b3-263050093c02",
              "parentUUID": "1f06ab1e-6faf-4a5a-8931-e5d344eb57d1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return an array of even numbers when given an array of numbers",
              "fullTitle": "getEvenNumbersFromArray should return an array of even numbers when given an array of numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [1, 2, 3, 4, 5, 6];\nconst expectedOutput = [2, 4, 6];\nconst output = validator.getEvenNumbersFromArray(input);\nexpect(output).to.deep.equal(expectedOutput);",
              "err": {},
              "uuid": "81b9c31c-2b3e-4c71-b606-d8b7bf16ead8",
              "parentUUID": "1f06ab1e-6faf-4a5a-8931-e5d344eb57d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array when given an array with no even numbers",
              "fullTitle": "getEvenNumbersFromArray should return an empty array when given an array with no even numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [1, 3, 5];\nconst output = validator.getEvenNumbersFromArray(input);\nexpect(output).to.be.an(\"array\").that.is.empty;",
              "err": {},
              "uuid": "e8e5d466-594b-4cbd-954f-810127b51e48",
              "parentUUID": "1f06ab1e-6faf-4a5a-8931-e5d344eb57d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when given a non-array input",
              "fullTitle": "getEvenNumbersFromArray should throw an error when given a non-array input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = \"not an array\";\nexpect(() => validator.getEvenNumbersFromArray(input)).to.throw(\n  `[not an array] is not an array of \"Numbers\"`\n);",
              "err": {},
              "uuid": "8cb1cbc8-d81d-4a38-be44-121442a0d7d4",
              "parentUUID": "1f06ab1e-6faf-4a5a-8931-e5d344eb57d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when given an array with non-numeric elements",
              "fullTitle": "getEvenNumbersFromArray should throw an error when given an array with non-numeric elements",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [1, 2, \"not a number\", 4];\nexpect(() => validator.getEvenNumbersFromArray(input)).to.throw(\n  `[1,2,not a number,4] is not an array of \"Numbers\"`\n);",
              "err": {},
              "uuid": "fa0e3bd5-c2b8-439e-925b-f5708874ba4b",
              "parentUUID": "1f06ab1e-6faf-4a5a-8931-e5d344eb57d1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "81b9c31c-2b3e-4c71-b606-d8b7bf16ead8",
            "e8e5d466-594b-4cbd-954f-810127b51e48",
            "8cb1cbc8-d81d-4a38-be44-121442a0d7d4",
            "fa0e3bd5-c2b8-439e-925b-f5708874ba4b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f31b0145-da77-44a9-b466-f2338bbfee40",
          "title": "isAllNumbers",
          "fullFile": "C:\\Users\\W\\OneDrive\\Desktop\\GitHub_projects\\Testing\\test\\numbers-validator\\isNumberEven.spec.js",
          "file": "\\test\\numbers-validator\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isAllNumbers\"",
              "fullTitle": "isAllNumbers \"before each\" hook in \"isAllNumbers\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "1b3fad87-c034-411d-90c3-d3a7ab63af6f",
              "parentUUID": "f31b0145-da77-44a9-b466-f2338bbfee40",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isAllNumbers\"",
              "fullTitle": "isAllNumbers \"after each\" hook in \"isAllNumbers\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "0cbc253b-0e6e-4229-a8ab-36539ca03576",
              "parentUUID": "f31b0145-da77-44a9-b466-f2338bbfee40",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true for an array of numbers",
              "fullTitle": "isAllNumbers should return true for an array of numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [1, 2, 3, 4, 5];\nconst result = validator.isAllNumbers(input);\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "0cfb56bd-bffa-49d8-967a-ce9769be104e",
              "parentUUID": "f31b0145-da77-44a9-b466-f2338bbfee40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an empty array",
              "fullTitle": "isAllNumbers should return true for an empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [];\nconst result = validator.isAllNumbers(input);\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "3edff58d-c6f0-4b59-84b1-22a26db91542",
              "parentUUID": "f31b0145-da77-44a9-b466-f2338bbfee40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if the argument is not an array",
              "fullTitle": "isAllNumbers should return false if the argument is not an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = \"not an array\";\nexpect(() => validator.isAllNumbers(input)).to.throw(\n  \"[not an array] is not an array\"\n);",
              "err": {},
              "uuid": "4f225519-228f-4ede-ad72-4e56d7a043f0",
              "parentUUID": "f31b0145-da77-44a9-b466-f2338bbfee40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if the array contains non-numeric elements",
              "fullTitle": "isAllNumbers should return false if the array contains non-numeric elements",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [1, 2, \"not a number\", 4];\nconst result = validator.isAllNumbers(input);\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "48f8a3ca-20cd-4cc9-aa28-7b38bed27475",
              "parentUUID": "f31b0145-da77-44a9-b466-f2338bbfee40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if any element in the array is not a number",
              "fullTitle": "isAllNumbers should return false if any element in the array is not a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [1, 2, 3, \"not a number\", 5];\nconst result = validator.isAllNumbers(input);\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "11e59a82-5d6d-4c5f-b1a1-2725a0064003",
              "parentUUID": "f31b0145-da77-44a9-b466-f2338bbfee40",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0cfb56bd-bffa-49d8-967a-ce9769be104e",
            "3edff58d-c6f0-4b59-84b1-22a26db91542",
            "4f225519-228f-4ede-ad72-4e56d7a043f0",
            "48f8a3ca-20cd-4cc9-aa28-7b38bed27475",
            "11e59a82-5d6d-4c5f-b1a1-2725a0064003"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "271799cb-7990-4e1b-9728-e862ee21e0af",
          "title": "isInteger",
          "fullFile": "C:\\Users\\W\\OneDrive\\Desktop\\GitHub_projects\\Testing\\test\\numbers-validator\\isNumberEven.spec.js",
          "file": "\\test\\numbers-validator\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isInteger\"",
              "fullTitle": "isInteger \"before each\" hook in \"isInteger\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "df0da6bd-60f5-46a0-b519-fc478a335830",
              "parentUUID": "271799cb-7990-4e1b-9728-e862ee21e0af",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isInteger\"",
              "fullTitle": "isInteger \"after each\" hook in \"isInteger\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "09618e76-6601-4eed-be11-ee85dd3ac5fd",
              "parentUUID": "271799cb-7990-4e1b-9728-e862ee21e0af",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true for an integer number",
              "fullTitle": "isInteger should return true for an integer number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = 5;\nconst result = validator.isInteger(input);\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "ee79ec1b-72be-46f8-9822-fe52993c0b22",
              "parentUUID": "271799cb-7990-4e1b-9728-e862ee21e0af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for 0",
              "fullTitle": "isInteger should return true for 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = 0;\nconst result = validator.isInteger(input);\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "bb4e918b-54e7-4e82-afd3-093eda94fc6b",
              "parentUUID": "271799cb-7990-4e1b-9728-e862ee21e0af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for negative integer number",
              "fullTitle": "isInteger should return true for negative integer number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = -5;\nconst result = validator.isInteger(input);\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "f04490ca-1c4e-4e57-aca0-1f3e90b49b3b",
              "parentUUID": "271799cb-7990-4e1b-9728-e862ee21e0af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a non-integer number",
              "fullTitle": "isInteger should return false for a non-integer number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = 5.5;\nconst result = validator.isInteger(input);\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "c63184d1-d33c-4948-992c-a05f2b8bd7db",
              "parentUUID": "271799cb-7990-4e1b-9728-e862ee21e0af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if the input is not a number",
              "fullTitle": "isInteger should throw an error if the input is not a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = \"not a number\";\nexpect(() => validator.isInteger(input)).to.throw(\n  \"[not a number] is not a number\"\n);",
              "err": {},
              "uuid": "5e45d859-822f-4180-8984-c518c1763ed1",
              "parentUUID": "271799cb-7990-4e1b-9728-e862ee21e0af",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ee79ec1b-72be-46f8-9822-fe52993c0b22",
            "bb4e918b-54e7-4e82-afd3-093eda94fc6b",
            "f04490ca-1c4e-4e57-aca0-1f3e90b49b3b",
            "c63184d1-d33c-4948-992c-a05f2b8bd7db",
            "5e45d859-822f-4180-8984-c518c1763ed1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}